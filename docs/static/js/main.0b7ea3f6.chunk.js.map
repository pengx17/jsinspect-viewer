{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["FilePath","_ref","instance","fragments","path","split","react_default","a","createElement","style","color","fontFamily","map","fragment","index","length","fontWeight","JSON","stringify","lines","JsonFileReader","_ref2","onFileContent","inputRef","React","createRef","ref","type","onInput","current","files","reader","FileReader","onload","value","json","parse","result","console","log","readAsText","accept","App","_useState","useState","defaultDup","_useState2","Object","slicedToArray","fileContent","setFileContent","toConsumableArray","sort","b","instances","_useState3","_useState4","collapseMapping","setCollapseMapping","App_JsonFileReader","item","key","id","onClick","prev","objectSpread","defineProperty","onCatClick","App_FilePath","react_highlight_default","code","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAgBMA,EAAqE,SAAAC,GAErE,IADJC,EACID,EADJC,SAEMC,EAAYD,EAASE,KAAKC,MAAM,KACtC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,MAAO,OAAQC,WAAY,cACtCR,EAAUS,IAAI,SAACC,EAAUC,GAAX,OACbA,IAAUX,EAAUY,OAAS,EAC3BF,EAAW,IAEXP,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAAEC,MAAO,OAAQM,WAAY,SAAWH,KAL3D,KAQKI,KAAKC,UAAUhB,EAASiB,OAR7B,IAQsC,IACnCjB,EAASiB,MAAM,GAAKjB,EAASiB,MAAM,KASpCC,EAA+D,SAAAC,GAE/D,IADJC,EACID,EADJC,cAEMC,EAAWC,IAAMC,YAqBvB,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOkB,IAAKH,EAAUI,KAAK,OAAOC,QAtBtB,WACd,GACuB,OAArBL,EAASM,SACRN,EAASM,QAAQC,OACgB,IAAlCP,EAASM,QAAQC,MAAMf,OAHzB,CAOA,IAAMgB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACVV,EAASM,UACXN,EAASM,QAAQK,MAAQ,IAE3B,IAAMC,EAAOlB,KAAKmB,MAAML,EAAOM,QAC/BC,QAAQC,IAAIJ,GACZb,GAAiBA,EAAca,IAEjCJ,EAAOS,WAAWjB,EAASM,QAAQC,MAAM,MAKaW,OAAO,YA2ClDC,EAtCsB,WAAM,IAAAC,EACHC,mBAA0BC,GADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAClCM,EADkCH,EAAA,GACrBI,EADqBJ,EAAA,GAEzCC,OAAAI,EAAA,EAAAJ,CAAIE,GAAaG,KAAK,SAAC7C,EAAG8C,GAAJ,OAAU9C,EAAE+C,UAAUvC,OAASsC,EAAEC,UAAUvC,SAFxB,IAAAwC,EAIKX,mBAE3C,IANsCY,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAIlCE,EAJkCD,EAAA,GAIjBE,EAJiBF,EAAA,GAgBzC,OACElD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAD,CAAgBrC,cAAe4B,IAC9BD,EAAYrC,IAAI,SAAAgD,GAAI,OACnBtD,EAAAC,EAAAC,cAAA,OAAKqD,IAAKD,EAAKE,IACbxD,EAAAC,EAAAC,cAAA,wBAAgBoD,EAAKN,UAAUvC,QAC/BT,EAAAC,EAAAC,cAAA,UACGoD,EAAKN,UAAU1C,IAAI,SAAAV,GAAQ,OAC1BI,EAAAC,EAAAC,cAAA,MAAIqD,IAAK3D,EAASE,KAAM2D,QAAS,kBAhB1B,SAAC7D,GAClBwD,EAAmB,SAAAM,GACjB,OAAOjB,OAAAkB,EAAA,EAAAlB,CAAA,GACFiB,EADLjB,OAAAmB,EAAA,EAAAnB,CAAA,GAEG7C,EAASE,MAAQ4D,EAAK9D,EAASE,UAYa+D,CAAWjE,KAChDI,EAAAC,EAAAC,cAAC4D,EAAD,CAAUlE,SAAUA,IACnBuD,EAAgBvD,EAASE,OACxBE,EAAAC,EAAAC,cAAC6D,EAAA9D,EAAD,KAAYL,EAASoE,eCrFnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b7ea3f6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Highlight from 'react-highlight';\n\nimport defaultDup from './dup.json';\n\ninterface JSInspectInstance {\n  lines: number[];\n  code: string;\n  path: string;\n}\n\ninterface JSInspectItem {\n  id: string;\n  instances: JSInspectInstance[];\n}\n\nconst FilePath: React.FunctionComponent<{ instance: JSInspectInstance }> = ({\n  instance,\n}) => {\n  const fragments = instance.path.split('/');\n  return (\n    <div style={{ color: '#666', fontFamily: 'monospace' }}>\n      {fragments.map((fragment, index) =>\n        index !== fragments.length - 1 ? (\n          fragment + '/'\n        ) : (\n          <span style={{ color: '#000', fontWeight: 'bold' }}>{fragment}</span>\n        )\n      )}\n      : {JSON.stringify(instance.lines)},{' '}\n      {instance.lines[1] - instance.lines[0]}\n    </div>\n  );\n};\n\ninterface JsonFileReaderProps {\n  onFileContent?: (fileContent: any) => void;\n}\n\nconst JsonFileReader: React.FunctionComponent<JsonFileReaderProps> = ({\n  onFileContent,\n}) => {\n  const inputRef = React.createRef<HTMLInputElement>();\n  const onInput = () => {\n    if (\n      inputRef.current === null ||\n      !inputRef.current.files ||\n      inputRef.current.files.length === 0\n    ) {\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      if (inputRef.current) {\n        inputRef.current.value = '';\n      }\n      const json = JSON.parse(reader.result as string);\n      console.log(json);\n      onFileContent && onFileContent(json);\n    };\n    reader.readAsText(inputRef.current.files[0]);\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} type=\"file\" onInput={onInput} accept=\".json\" />\n    </div>\n  );\n};\n\nconst App: React.FunctionComponent = () => {\n  const [fileContent, setFileContent] = useState<JSInspectItem[]>(defaultDup);\n  [...fileContent].sort((a, b) => a.instances.length - b.instances.length);\n\n  const [collapseMapping, setCollapseMapping] = useState<{\n    [i: string]: boolean;\n  }>({});\n\n  const onCatClick = (instance: JSInspectInstance) => {\n    setCollapseMapping(prev => {\n      return {\n        ...prev,\n        [instance.path]: !prev[instance.path],\n      };\n    });\n  };\n  return (\n    <div>\n      <JsonFileReader onFileContent={setFileContent} />\n      {fileContent.map(item => (\n        <div key={item.id}>\n          <h4>Instances: {item.instances.length}</h4>\n          <ul>\n            {item.instances.map(instance => (\n              <li key={instance.path} onClick={() => onCatClick(instance)}>\n                <FilePath instance={instance} />\n                {collapseMapping[instance.path] && (\n                  <Highlight>{instance.code}</Highlight>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'highlight.js/styles/default.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}